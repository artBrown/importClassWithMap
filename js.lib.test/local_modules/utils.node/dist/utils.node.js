"use strict";var _serializers=_interopRequireDefault(require("serializers"));function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function asyncGeneratorStep(e,r,n,t,a,i,o){try{var u=e[i](o),s=u.value}catch(e){return void n(e)}u.done?r(s):Promise.resolve(s).then(t,a)}function _asyncToGenerator(e){return function(){var r=this,n=arguments;return new Promise((function(t,a){var i=e.apply(r,n);function o(e){asyncGeneratorStep(i,t,a,o,u,"next",e)}function u(e){asyncGeneratorStep(i,t,a,o,u,"throw",e)}o(void 0)}))}}function _classCallCheck(e,r){if(!(e instanceof r))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,r){for(var n=0;n<r.length;n++){var t=r[n];t.enumerable=t.enumerable||!1,t.configurable=!0,"value"in t&&(t.writable=!0),Object.defineProperty(e,t.key,t)}}function _createClass(e,r,n){return r&&_defineProperties(e.prototype,r),n&&_defineProperties(e,n),e}function _defineProperty(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}var BT=function(){var e,r;return r=e=function(){function e(){var r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;_classCallCheck(this,e),this._nd=new BT.Nd(r)}var r,n;return _createClass(e,[{key:"appendEntryInNodeTree",value:function(e,r){return void 0===e&&(this._nd=this.appendEntryInNodeTree(this._nd,r)),null===e?e=new BT.Nd(r):e._e<=r?e._r=this.appendEntryInNodeTree(e._r,r):e._l=this.appendEntryInNodeTree(e._l,r),e}},{key:"rakeEntryNodeInTree",value:function(e,r){return void 0===r?this.rakeEntryNodeInTree(e,0):(null===e||(null!==e._r&&this.rakeEntryNodeInTree(e._r,r+1),null!==e._l&&this.rakeEntryNodeInTree(e._l,r+1),console.log(this.genIndentSpaces(r)+""+e._e)),null)}},{key:"propagateSeedMethod",value:function(e,r,n){n===BT._u&&this.appendEntryInNodeTree(e,r),(r<0&&n===BT._a||0<r&&n===BT._d)&&(this.appendEntryInNodeTree(e,r),n===BT._a?r++:r--,this.propagateSeedMethod(e,r,n))}},{key:"genIndentSpaces",value:function(e){for(var r="";0!=e--;)r+=" ";return r}},{key:"writeBinaryTree",value:(n=_asyncToGenerator(regeneratorRuntime.mark((function e(r,n,t){var a;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return a=this.writeBinaryTreeNode(r,""),e.prev=1,e.next=4,_serializers.default.writeStringToFile(a,n,t);case 4:e.next=9;break;case 6:e.prev=6,e.t0=e.catch(1),console.log(e.t0);case 9:case"end":return e.stop()}}),e,this,[[1,6]])}))),function(e,r,t){return n.apply(this,arguments)})},{key:"writeBinaryTreeNode",value:function(e,r){return null===e?r+="# ":(r+=e._e.toString()+" ",r=this.writeBinaryTreeNode(e._l,r),r=this.writeBinaryTreeNode(e._r,r)),r}},{key:"readBinaryTree",value:(r=_asyncToGenerator(regeneratorRuntime.mark((function e(r,n,t){var a,i,o,u,s,l;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return a=[],e.prev=1,e.next=4,_serializers.default.readStringFmFile(a,n,t);case 4:e.next=9;break;case 6:e.prev=6,e.t0=e.catch(1),console.log(e.t0);case 9:return i=a[0],o=i?i.match(/(?:\d+|#)\s/g):void 0,u=[],o&&o.forEach((function(e){return u.push(e)})),s=_serializers.default.makeIterator(u),l=new RegExp(/-?[0-9]*\.?[0-9]+\s/g),r=this.readBinaryTreeNode(r,s,l),e.abrupt("return",r);case 17:case"end":return e.stop()}}),e,this,[[1,6]])}))),function(e,n,t){return r.apply(this,arguments)})},{key:"readBinaryTreeNode",value:function(e,r,n){if(!r.hasNext())return e;var t,a=r.next();return a.match(n)?(t=parseInt(a.trim()),(e=new BT.Nd(t))._l=this.readBinaryTreeNode(e._l,r,n),e._r=this.readBinaryTreeNode(e._r,r,n),e):e}}]),e}(),_defineProperty(e,"_a",1),_defineProperty(e,"_d",-1),_defineProperty(e,"_u",0),_defineProperty(e,"Nd",function(){return function e(r){_classCallCheck(this,e),this._l=null,this._r=null,this._e=r}}()),r}();module.exports={BinaryTree:BT};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
